<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-10-21T14:28:39.216Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Zhiwei Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动效理论-子弹时间</title>
    <link href="http://example.com/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/"/>
    <id>http://example.com/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/</id>
    <published>2024-10-21T13:57:44.000Z</published>
    <updated>2024-10-21T14:28:39.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子弹时间"><a class="markdownIt-Anchor" href="#子弹时间"></a> <a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4#:~:text=%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4%EF%BC%88%E8%8B%B1%E8%AA%9E%EF%BC%9Abullet%20time,%E8%A7%86%E8%A7%92%EF%BC%89%E4%B9%9F%E5%9B%B4%E7%BB%95%E5%9C%BA%E6%99%AF%E6%97%8B%E8%BD%AC%E3%80%82">子弹时间</a></h3><p>是电影、电视广告或电脑游戏中，用电子计算机辅助的摄影技术模拟变速特效，例如强化的慢镜头、时间静止等效果。它的特点是不但在时间上极端变化（观众可以看到一些在平常不能见到的景象，如子弹缓慢飞过头顶，因此得名），而且在空间上极端变化：在慢镜头的同时拍摄角度（观众视角）也围绕场景旋转。</p><span id="more"></span><p>在影视作品中，剧情在推向高潮的时候，使用子弹时间更能让观众感受到紧张，刺激的感觉。在游戏中往往用在击杀boss通关后或者操作躲过某个危险场景时，增加爽快感。</p><h4 id="子弹时间为什么会给人造成这样的感受那"><a class="markdownIt-Anchor" href="#子弹时间为什么会给人造成这样的感受那"></a> 子弹时间为什么会给人造成这样的感受那？</h4><p>子弹时间是通过拉长某个动作的正常展示时间实现，来刻意的带给人某种感受。而时间并不是自然界客观存在的物质，而是人类自己定义想象出来的，因为每个人的感受不同，对时间的感受自然不同，为了群体认知一致，统一为现在的计时方式。</p><p>在<a href="https://centurygames.yuque.com/gm5/tcvda7/hzo6b0">临界融合频率</a>中，生物学角度，动物的新陈代谢频率可以决定他对时间快慢的感知，从心理学角度，情绪的变化也可以决定感受时间的快慢。</p><ol><li><p><strong>情绪</strong><br />比如，一分钟有多长，取决于你在厕所外还是在厕所内。</p> <img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/1_1.png" class="" title="图片加载失败的描述"><p>当一个人处在紧张，焦虑，恐惧，痛苦等<strong>负面情绪</strong>时，时间就会变慢。<br />在游戏中， 我们希望玩家更长时间的留在游戏内，那么就需要让玩家不自觉的时间变快，也就是消除负面情绪，提供愉快，刺激的体验。</p></li><li><p><strong>注意力</strong><br />除了负面情绪，还有就是<strong>注意力。</strong><br />比如当我们集中注意力在学习或者工作，会觉得时间飞快流逝。街头玩接棒子的游戏，如果很认真的观察精神高度集中，就很难抓住棒子，感觉时间很快，但是如果分散注意力不去刻意盯着棒子，会感觉掉落的棒子没有那么快。</p><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/1_3.png" class="" title="图片加载失败的描述"><p>在游戏中如何让玩家集中精力，也可以提升玩家留存时间。</p><p>一个例子是短视频平台，抖音快手这种，区别于传统长视频，就如同上课，同一内容无法长时间精力高度集中，而短视频时间短，在精力要分散时就该滑到下一个视频，新的内容刺激人专注，不感兴趣的内容会引起精力分散，马上滑走直到感兴趣内容出现，形成奶头乐，没怎么注意一两个小时就没了。</p></li><li><p><strong>内容数量</strong><br />A ------<br />B --------------<br />画两条线，问哪个先用时长，下意识都会认为B用时长，但是这里的线是用同样时间画成的。  人脑倾向认为，内容多，用时间也越多。小时候，每天接触的都是新鲜事物，内容很多，感觉时间过得很慢，长大之后，每天上班打卡，尤其是一些重复性工作，两点一线，每天都一样的过，相似内容，感觉时间飞逝<br />在游戏中，用文字来表意，和用图形或者动效来表意，显然文字带来的内容更多，即便再短，让玩家感觉读完后花了很长时间，而图形和动效则内容足够简洁，时间自然也感觉没停留多久，即便动画是需要播放时间的。</p></li></ol><p>以上三方面可能导致人类对于时间的感知偏差，相反的，如果我们在特定的位置将时间刻意拉长，就会让玩家感受到对应的感受，也就是子弹时间的作用。</p><p>在游戏中合理运用子弹时间也就给玩家提供正向情绪，从战斗的专注度中切换出来，不至于一直保持同一状态，很容易疲劳，有节奏感。</p><h3 id="子弹时间在电影中应用"><a class="markdownIt-Anchor" href="#子弹时间在电影中应用"></a> 子弹时间在电影中应用</h3><p><strong>电影 《黑客帝国》</strong></p><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/2_1.gif" class="" title="图片加载失败的描述"><p><strong>《猎杀T34》</strong></p><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/2_2.gif" class="" title="图片加载失败的描述"><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/2_3.gif" class="" title="图片加载失败的描述"><h3 id="子弹时间在游戏中应用"><a class="markdownIt-Anchor" href="#子弹时间在游戏中应用"></a> 子弹时间在游戏中应用</h3><p><strong>《刺客信条》</strong></p><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/3_1.gif" class="" title="图片加载失败的描述"><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/3_2.gif" class="" title="图片加载失败的描述"><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/3_3.gif" class="" title="图片加载失败的描述"><p><strong>手游中 《神觉者》</strong></p><img src="/2024/10/21/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4/4_1.gif" class="" width="350" height="700" title="图片加载失败的描述">]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;子弹时间&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#子弹时间&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4#:~:text=%E5%AD%90%E5%BC%B9%E6%97%B6%E9%97%B4%EF%BC%88%E8%8B%B1%E8%AA%9E%EF%BC%9Abullet%20time,%E8%A7%86%E8%A7%92%EF%BC%89%E4%B9%9F%E5%9B%B4%E7%BB%95%E5%9C%BA%E6%99%AF%E6%97%8B%E8%BD%AC%E3%80%82&quot;&gt;子弹时间&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;是电影、电视广告或电脑游戏中，用电子计算机辅助的摄影技术模拟变速特效，例如强化的慢镜头、时间静止等效果。它的特点是不但在时间上极端变化（观众可以看到一些在平常不能见到的景象，如子弹缓慢飞过头顶，因此得名），而且在空间上极端变化：在慢镜头的同时拍摄角度（观众视角）也围绕场景旋转。&lt;/p&gt;</summary>
    
    
    
    <category term="动效" scheme="http://example.com/categories/%E5%8A%A8%E6%95%88/"/>
    
    
  </entry>
  
  <entry>
    <title>游戏战斗中碰撞检测优化-空间分割</title>
    <link href="http://example.com/2024/10/20/2d%E6%B8%B8%E6%88%8F%E6%88%98%E6%96%97%E4%B8%AD%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B%E4%BC%98%E5%8C%96-%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86/"/>
    <id>http://example.com/2024/10/20/2d%E6%B8%B8%E6%88%8F%E6%88%98%E6%96%97%E4%B8%AD%E7%A2%B0%E6%92%9E%E6%A3%80%E6%B5%8B%E4%BC%98%E5%8C%96-%E7%A9%BA%E9%97%B4%E5%88%92%E5%88%86/</id>
    <published>2024-10-20T13:37:44.000Z</published>
    <updated>2024-11-21T13:52:20.049Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h5><p>在开发类似雷电的游戏中，小人会发出子弹，并对随机出的小人时时进行碰撞检测。遇到的性能问题是，屏幕自上而下按轮数先后出一百个小人，每个小人都可以对玩家发出子弹，玩家可以向敌人发出子弹，可以同时拥有十几个武器，并且拥有不同的武器，发出的子弹形状和形态都不一样，同屏可能会出现几百个敌人和几百个子弹，他们的位置每帧都在移动，每帧都需要进行子弹和角色的碰撞检测，导致敌人多时，每帧计算过多，CPU占用卡到不能动。</p><span id="more"></span><h5 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h5><ol><li><p>渲染优化<br />骨骼动画合并到一个动画里，使用一张纹理，减少纹理切换，使用cocos的<strong>PRIVATE_CACHE</strong> 模式并开启动画合批降低drawcall.</p></li><li><p>碰撞检测优化<br />不使用物理引擎，避免物理引擎中冗余的计算，对不同的子弹，进行不同的碰撞计算，比如圆和矩形碰撞，点和矩形碰撞，避免使用多边形碰撞等等。</p></li><li><p>碰撞检测前空间划分<br />同屏过多的小人，一颗子弹每帧会遍历所有敌人，挨个进行碰撞计算会依然会卡顿，当一颗子弹发出，没必要对所有敌人进行检测，只需要对他周围可能会碰到的敌人去检测，会大大提高效率。需要对数量众多的敌人进行分区域，通过子弹所在区域只对该区域的敌人去检测。</p></li></ol><h5 id="空间划分"><a class="markdownIt-Anchor" href="#空间划分"></a> 空间划分</h5><ol><li>网格划分<br />均匀网格划分，根据子弹的矩形大小，为网格格子大小，对整个地图划分网格。<br /><img src="1.png" alt="test" width="200px" /><br />这样就可以根据子弹和怪的坐标，确定是否在同一个格子中，来筛选出该判断的小怪实例，测试发现性能提升不少。但是不稳定，只能是特别简单的情况性能才会有明显优势。<br />这种方式存在问题<ol><li>子弹和小怪是存在体积的，不是一个点，一个小怪可能在多个格子中。</li><li>子弹存在旋转，且子弹的形态不同，有小矩形小子弹，扇形的喷火器，也有激光子弹这种贯穿屏幕的。使网格大小有可能一个屏幕只能会有1个存在。约等于没提升。<br />针对上面的问题，尝试通过这种方式优化一下</li></ol></li></ol><p><img src="2.png" alt="" /><br />将格子偏移一定距离，也就是扩大一定格子的大小，结果有所提升，但是并不好。</p><ol start="2"><li>四叉树<br /><img src="3.png" alt="" />  <img src="4.png" alt="" /><br />开始尝试使用四叉树，对整个地图做动态分区。这样效率大大提升。基本不会出现严重卡顿的情况了。<br />2d空间四叉树，对一个平面进行四等分，再对每一个分块再进行四等分，知道该区域内所有节点数量达到预先设置的阈值。基础思想其实就是2分法。</li></ol><p>因为用的cocos引擎，所有找的一个四叉树的js库，<br /><a href="https://github.com/timohausmann/quadtree-js">https://github.com/timohausmann/quadtree-js</a><br />可以动态检索与被检查物体在同一范围内的其他小怪，从下面的图看到，200个小怪只需要检测个位数的小怪来完成预筛选<br /><a href="https://timohausmann.de/quadtree.js/dynamic.html">https://timohausmann.de/quadtree.js/dynamic.html</a><br /><img src="5.jpg" alt="400" /></p><p>这个库提供了最基础的四叉树构建，和动态添加功能，可以设置树的最大深度，树节点可包含的node的阈值。代码很少，很精炼。<br />缺点：</p><ol><li>只能动态添加，不能动态删除。</li><li>想要动态删除和添加，需要每帧开始时，重新构建地图上所有怪物的四叉树</li><li>对象只能是矩形。<br />由于项目时间的限制，没有过多时间去这个库进行针对性修改逻辑，但是性能上提升很多，基本够用。<br /><img src="6.jpg" alt="200" />        <img src="7.jpg" alt="200" /></li></ol><p>还有很多其他的空间划分，没再过多研究。除了对碰撞检测进行优化，还可以引用在视锥剔除，比如游戏中的大地图，不在某一范围的可以不显示，或者忽略细节，3d游戏中，摄像机中物体被其他物体挡住后可以不渲染来提升渲染效率。</p><p><code> </code></p><pre><code>Referencehttps://blog.csdn.net/liran2019/article/details/106966794https://www.cnblogs.com/KillerAery/p/10878367.htmlhttps://forum.cocos.org/t/topic/95573</code></pre>]]></content>
    
    
    <summary type="html">&lt;h5 id=&quot;问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#问题&quot;&gt;&lt;/a&gt; 问题&lt;/h5&gt;
&lt;p&gt;在开发类似雷电的游戏中，小人会发出子弹，并对随机出的小人时时进行碰撞检测。遇到的性能问题是，屏幕自上而下按轮数先后出一百个小人，每个小人都可以对玩家发出子弹，玩家可以向敌人发出子弹，可以同时拥有十几个武器，并且拥有不同的武器，发出的子弹形状和形态都不一样，同屏可能会出现几百个敌人和几百个子弹，他们的位置每帧都在移动，每帧都需要进行子弹和角色的碰撞检测，导致敌人多时，每帧计算过多，CPU占用卡到不能动。&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>动效理论-刷新率</title>
    <link href="http://example.com/2024/08/22/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%88%B7%E6%96%B0%E7%8E%87/"/>
    <id>http://example.com/2024/08/22/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%88%B7%E6%96%B0%E7%8E%87/</id>
    <published>2024-08-22T13:23:44.000Z</published>
    <updated>2024-08-22T13:39:15.554Z</updated>
    
    <content type="html"><![CDATA[ <img src="/2024/08/22/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%88%B7%E6%96%B0%E7%8E%87/a.png" class="" title="图片加载失败的描述"><p>更高的刷新率是指显示器更新屏显图片的频率。此更新间隔的单位为毫秒 (ms)，而显示器刷新率的单位为赫兹 (Hz)。</p><span id="more"></span><p>显示器的刷新率是指显示器每秒绘制新图像的次数。其单位为赫兹 (Hz)。例如，如果您的显示器刷新率为 144 Hz，这是指它每秒钟会刷新图像 144 次。当与 GPU 和 CPU 联合产生的高帧速率相结合时，刷新率能够带来更流畅的体验，可能还会有更高的帧速率。</p><p>如需了解系统可以支持的刷新率，最佳（也最简单）的方法就是运行游戏，从而查看系统的性能表现。游戏过程中，使用 <a href="https://fraps.com/">Fraps</a> 等帧速率监控程序来显示您的当前帧速率 (FPS)。大部分帧速率监控程序将能够测试您的<a href="https://www.intel.cn/content/www/cn/zh/gaming/resources/read-cpu-benchmarks.html">平均帧速率</a>，以追踪您在游戏过程中的系统性能。</p><blockquote><p><a href="https://www.intel.cn/content/www/cn/zh/gaming/resources/highest-refresh-rate-gaming.html"><strong>什么是刷新率以及为什么它很重要</strong></a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;/2024/08/22/%E5%8A%A8%E6%95%88%E7%90%86%E8%AE%BA-%E5%88%B7%E6%96%B0%E7%8E%87/a.png&quot; class=&quot;&quot; title=&quot;图片加载失败的描述&quot;&gt;
&lt;p&gt;更高的刷新率是指显示器更新屏显图片的频率。此更新间隔的单位为毫秒 (ms)，而显示器刷新率的单位为赫兹 (Hz)。&lt;/p&gt;</summary>
    
    
    
    <category term="动效" scheme="http://example.com/categories/%E5%8A%A8%E6%95%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Synology中指定nodejs版本</title>
    <link href="http://example.com/2024/08/22/Synology%E4%B8%AD%E6%8C%87%E5%AE%9Anodejs%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2024/08/22/Synology%E4%B8%AD%E6%8C%87%E5%AE%9Anodejs%E7%89%88%E6%9C%AC/</id>
    <published>2024-08-22T08:19:44.000Z</published>
    <updated>2024-08-22T12:21:31.431Z</updated>
    
    <content type="html"><![CDATA[<h3 id="手动下载安装-nvm"><a class="markdownIt-Anchor" href="#手动下载安装-nvm"></a> 手动下载安装 nvm</h3><h4 id="1-在本地机器上下载-nvm-源码"><a class="markdownIt-Anchor" href="#1-在本地机器上下载-nvm-源码"></a> 1. 在本地机器上下载 nvm 源码</h4><p>在你的本地机器上执行以下操作：</p><ol><li><p>打开终端（或 git bash，如果你在 Windows 上）。</p></li><li><p>下载 nvm 源码：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nvm-sh/nvm.git</span><br></pre></td></tr></table></figure></li></ol><span id="more"></span><h4 id="2-上传-nvm-源码到-synology-群晖设备"><a class="markdownIt-Anchor" href="#2-上传-nvm-源码到-synology-群晖设备"></a> 2. 上传 nvm 源码到 Synology 群晖设备</h4><p>你可以使用工具（如 FileZilla 或 WinSCP）将下载的 <code>nvm</code> 文件夹上传到你的群晖设备上，例如上传到用户主目录下。</p><h4 id="3-在-synology-群晖设备上手动安装-nvm"><a class="markdownIt-Anchor" href="#3-在-synology-群晖设备上手动安装-nvm"></a> 3. 在 Synology 群晖设备上手动安装 nvm</h4><ol><li><p>通过 SSH 登录到你的 Synology 群晖设备。</p></li><li><p>导航到你上传的 <code>nvm</code> 目录：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/nvm</span><br></pre></td></tr></table></figure></li><li><p>运行安装命令：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.nvm</span><br><span class="line"><span class="built_in">cp</span> -r ./nvm/* ~/.nvm/</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量以加载 nvm：</p><p>编辑你的 <code>.bashrc</code> 文件（或者 <code>.zshrc</code>，如果你使用 <code>zsh</code>）：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.bashrc</span><br></pre></td></tr></table></figure><p>添加以下内容到文件末尾：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure><p>保存并关闭文件，然后重新加载 Shell 配置：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-使用-nvm-安装指定版本的-nodejs"><a class="markdownIt-Anchor" href="#4-使用-nvm-安装指定版本的-nodejs"></a> 4. 使用 nvm 安装指定版本的 Node.js</h4><p>在套件中心下载过往版本node</p> <img src="/2024/08/22/Synology%E4%B8%AD%E6%8C%87%E5%AE%9Anodejs%E7%89%88%E6%9C%AC/a.png" class="" title="图片加载失败的描述"><p>现在你可以使用 <code>nvm</code> 安装指定的 Node.js 版本。例如，要安装 Node.js 14.21.3：<br />查看当前已有的nodejs版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br><span class="line">nvm <span class="built_in">set</span> 14.21.3</span><br></pre></td></tr></table></figure><h3 id="验证安装"><a class="markdownIt-Anchor" href="#验证安装"></a> 验证安装</h3><p>验证 Node.js 和 npm 是否成功安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;手动下载安装-nvm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#手动下载安装-nvm&quot;&gt;&lt;/a&gt; 手动下载安装 nvm&lt;/h3&gt;
&lt;h4 id=&quot;1-在本地机器上下载-nvm-源码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-在本地机器上下载-nvm-源码&quot;&gt;&lt;/a&gt; 1. 在本地机器上下载 nvm 源码&lt;/h4&gt;
&lt;p&gt;在你的本地机器上执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开终端（或 git bash，如果你在 Windows 上）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 nvm 源码：&lt;/p&gt;
 &lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/nvm-sh/nvm.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="技术" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法参考以及在Hexo使用</title>
    <link href="http://example.com/2024/08/07/markdown%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83%E4%BB%A5%E5%8F%8A%E5%9C%A8Hexo%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/08/07/markdown%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83%E4%BB%A5%E5%8F%8A%E5%9C%A8Hexo%E4%BD%BF%E7%94%A8/</id>
    <published>2024-08-07T04:10:44.000Z</published>
    <updated>2024-08-22T12:21:42.994Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录一些Markdown的基础使用语法，以及一些在Hexo中使用的方式方法，方便后面写Blog参考。</p><p><a href="https://markdown.com.cn/basic-syntax/">MarkDown官方教程语法</a></p><span id="more"></span><h3 id="给hexo中添加本地图片"><a class="markdownIt-Anchor" href="#给hexo中添加本地图片"></a> 给Hexo中添加本地图片</h3><ol><li><p><a href="https://hexo.io/zh-cn/docs/asset-folders">绝对路径及其他使用方法</a></p></li><li><p>当前适合本Blog的方法，相对路径：每一个文章当需要使用图片，在目录下同名文件夹，并使用markdown语法插入本地图片。<br />eg:<br />测试图片插入通过markdown语法<br />原图<br /><img src="testImg.jpeg" alt="" /><br />限制图片宽高为200x200<br /><img src="testImg.jpeg" alt="test" width="100px" /><br />!warning<br />（此问题未解决）暂时使用hexo 的标签语法</p><p>Hexo标签语法</p>  <img src="/2024/08/07/markdown%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83%E4%BB%A5%E5%8F%8A%E5%9C%A8Hexo%E4%BD%BF%E7%94%A8/testImg.jpeg" class="" width="200" height="200" title="图片加载失败的描述"></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录一些Markdown的基础使用语法，以及一些在Hexo中使用的方式方法，方便后面写Blog参考。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://markdown.com.cn/basic-syntax/&quot;&gt;MarkDown官方教程语法&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
</feed>
