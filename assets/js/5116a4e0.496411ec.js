"use strict";(self.webpackChunk_0313_blog=self.webpackChunk_0313_blog||[]).push([[1936],{3617:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Unity/Shader/\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9","title":"\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9","description":"\u6548\u679c","source":"@site/docs/Unity/Shader/\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9.md","sourceDirName":"Unity/Shader","slug":"/Unity/Shader/\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9","permalink":"/docs/Unity/Shader/\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Unity/Shader/\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9.md","tags":[],"version":"current","sidebarPosition":1022,"frontMatter":{"title":"\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9","date":"2025-04-11T17:41:44.000Z","categories":["Unity","Shader"],"sidebar_position":1022},"sidebar":"tutorialSidebar","previous":{"title":"\u793a\u4f8b\u4e4b\u5361\u901a\u98ce\u683c\u989d\u5916\u6548\u679c","permalink":"/docs/Unity/Shader/\u793a\u4f8b\u4e4b\u5361\u901a\u98ce\u683c\u989d\u5916\u6548\u679c"},"next":{"title":"\u5404\u79cd\u5de5\u5177","permalink":"/docs/Unity/\u5404\u79cd\u5de5\u5177"}}');var a=t(4848),s=t(8453);const l={title:"\u793a\u4f8b\u4e4bRenderFeature\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u63cf\u8fb9",date:new Date("2025-04-11T17:41:44.000Z"),categories:["Unity","Shader"],sidebar_position:1022},i=void 0,o={},d=[{value:"\u6548\u679c",id:"\u6548\u679c",level:2},{value:"\u5b9e\u73b0\u601d\u8def",id:"\u5b9e\u73b0\u601d\u8def",level:2},{value:"\u5b9e\u73b0\u6b65\u9aa4",id:"\u5b9e\u73b0\u6b65\u9aa4",level:2},{value:"\u5173\u952e\u6b65\u9aa4",id:"\u5173\u952e\u6b65\u9aa4",level:2},{value:"RenderPass \u4e2d\u6dfb\u52a0pass \u8fdb\u884c\u540e\u5904\u7406",id:"renderpass-\u4e2d\u6dfb\u52a0pass-\u8fdb\u884c\u540e\u5904\u7406",level:4},{value:"\u8fb9\u7f18\u68c0\u6d4b",id:"\u8fb9\u7f18\u68c0\u6d4b",level:4},{value:"\u5168\u90e8\u4ee3\u7801",id:"\u5168\u90e8\u4ee3\u7801",level:2},{value:"Reference",id:"reference",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"\u6548\u679c",children:"\u6548\u679c"}),"\n",(0,a.jsx)("div",{align:"center",children:(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"\u6548\u679c",src:t(4674).A+"",width:"640",height:"498"})})}),"\n",(0,a.jsx)(n.h2,{id:"\u5b9e\u73b0\u601d\u8def",children:"\u5b9e\u73b0\u601d\u8def"}),"\n",(0,a.jsx)(n.p,{children:"\u9700\u8981\u5bf9\u6240\u6709\u7269\u4f53\u8fdb\u884c\u63cf\u8fb9\uff0c\u8ba9\u6bcf\u4e2a\u7269\u4f53\u4fee\u6539shader\u6dfb\u52a0\u63cf\u8fb9\u4e0d\u73b0\u5b9e\uff0c\u901a\u8fc7RenderFeature\u673a\u5236\uff0c\u5b9e\u73b0\u5bf9\u6574\u4e2a\u6444\u50cf\u673a\u753b\u9762\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\uff0c\u83b7\u53d6\u5bf9\u5e94\u50cf\u7d20\u7684\u6cd5\u7ebf\uff0c\u4eae\u5ea6\uff0c\u6df1\u5ea6\u91c7\u6837\u6765\u8fdb\u884c\u8fb9\u7f18\u52a0\u6d4b\uff0c\u5e76\u8fdb\u884c\u63cf\u8fb9\u3002"}),"\n",(0,a.jsx)(n.h2,{id:"\u5b9e\u73b0\u6b65\u9aa4",children:"\u5b9e\u73b0\u6b65\u9aa4"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"\u521b\u5efa\u4e00\u4e2aRenderFeature\u811a\u672c\uff0c \u5e76\u5728RenderAsset\u4e2d\u6dfb\u52a0\u8be5RenderFeature"}),"\n",(0,a.jsx)(n.li,{children:"\u521b\u5efa\u4e00\u4e2aVolume\u7ec4\u4ef6\uff0c\u6765\u63a7\u5236\u5916\u90e8\u4e0eShader\u7684\u5c5e\u6027\u4ea4\u4e92\u3002"}),"\n",(0,a.jsx)(n.li,{children:"\u521b\u5efa\u4e00\u4e2aRenderPass\uff0c \u5e76\u8bbe\u7f6eRenderPass\u7684\u6e32\u67d3\u987a\u5e8f"}),"\n",(0,a.jsx)(n.li,{children:"\u521b\u5efa\u4e00\u4e2aShader, \u5728Shader\u4e2d\u5b9e\u73b0\u8fb9\u7f18\u68c0\u6d4b\u548c\u63cf\u8fb9"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"\u5173\u952e\u6b65\u9aa4",children:"\u5173\u952e\u6b65\u9aa4"}),"\n",(0,a.jsx)(n.h4,{id:"renderpass-\u4e2d\u6dfb\u52a0pass-\u8fdb\u884c\u540e\u5904\u7406",children:"RenderPass \u4e2d\u6dfb\u52a0pass \u8fdb\u884c\u540e\u5904\u7406"}),"\n",(0,a.jsx)(n.p,{children:"\u83b7\u53d6\u6444\u50cf\u673a\u7684TextureHandler\uff0c\u901a\u8fc7Blitter.BlitTexture\u8fdb\u884c\u540e\u5904\u7406\u3002"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'    public override void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData)\n    {\n\n        UniversalResourceData resourceData = frameData.Get<UniversalResourceData>();\n        using (var builder = renderGraph.AddRasterRenderPass<PassData>("EdgeDetectionRenderPass", out PassData data))\n        {\n            builder.SetRenderAttachment(resourceData.activeColorTexture, 0);\n            builder.UseAllGlobalTextures(true);\n            builder.AllowPassCulling(false);\n            builder.SetRenderFunc<PassData>((PassData data, RasterGraphContext context) => ExecutePass(data, context));\n        }\n\t}\n\tprivate void ExecutePass(PassData data, RasterGraphContext context)\n    {\n        Blitter.BlitTexture(context.cmd, Vector2.one, m_Material, 0);\n    }\n'})}),"\n",(0,a.jsx)(n.h4,{id:"\u8fb9\u7f18\u68c0\u6d4b",children:"\u8fb9\u7f18\u68c0\u6d4b"}),"\n",(0,a.jsxs)(n.p,{children:["\u7740\u8272\u5668\u91c7\u7528 ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Roberts_cross",children:"Roberts Cross"})," \u7b97\u5b50\uff0c \u901a\u8fc7\u6df1\u5ea6\u56fe\uff0c\u6cd5\u7ebf\u56fe\uff0c\u4eae\u5ea6\u56fe\uff0c\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b\u3002\u76f8\u6bd4\u7b80\u5355\u7684\u5dee\u5206\u66f4\u51c6\u786e\u3002\u9002\u5408\u6355\u6349\u7ec6\u8282\u3002"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// Roberts Cross\u7b97\u5b50\u7684\u5411\u91cf\u7248\u672c\nfloat RobertsCross(float3 samples[4])\n{\n    const float3 difference_1 = samples[1] - samples[2];\n    const float3 difference_2 = samples[0] - samples[3];\n    return sqrt(dot(difference_1, difference_1) + dot(difference_2, difference_2));\n}\n\n// Roberts Cross\u7b97\u5b50\u7684\u6807\u91cf\u7248\u672c\nfloat RobertsCross(float samples[4])\n{\n    const float difference_1 = samples[1] - samples[2];\n    const float difference_2 = samples[0] - samples[3];\n    return sqrt(difference_1 * difference_1 + difference_2 * difference_2);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u50cf\u7d20\u70b9\u7684\u91c7\u6837\u65b9\u5f0f\uff0c\u5bf9\u6bcf\u4e2a\u50cf\u7d20 \u5bf9\u89d2\u7ebf\u65b9\u5411\u50cf\u7d20\u5dee\u7684\u5e73\u65b9\u548c\u6765\u68c0\u6d4b\u8fb9\u7f18"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"\tfloat2 uvs[4];\n\tuvs[0] = uv + texel_size * float2(half_width_f, half_width_c) * float2(-1, 1);  // top left\n\tuvs[1] = uv + texel_size * float2(half_width_c, half_width_c) * float2(1, 1);   // top right\n\tuvs[2] = uv + texel_size * float2(half_width_f, half_width_f) * float2(-1, -1); // bottom left\n\tuvs[3] = uv + texel_size * float2(half_width_c, half_width_f) * float2(1, -1);  // bottom right\n"})}),"\n",(0,a.jsx)(n.p,{children:"\u6839\u636e\u6df1\u5ea6\uff0c\u6cd5\u7ebf\uff0c\u4eae\u5ea6\uff0c\u591a\u7ef4\u5ea6\u8fdb\u884c\u8fb9\u7f18\u68c0\u6d4b"}),"\n",(0,a.jsx)(n.h2,{id:"\u5168\u90e8\u4ee3\u7801",children:"\u5168\u90e8\u4ee3\u7801"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"Unity6\u5b9e\u73b0"})}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"EdgeDetectionRenderPass.cs"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.RenderGraphModule;\nusing UnityEngine.Rendering.RenderGraphModule.Util;\nusing UnityEngine.Rendering.Universal;\n\npublic class EdgeDetectionRenderPass : ScriptableRenderPass\n{\n    internal class PassData\n    {\n        public Material Material;\n        public TextureHandle DepthTexture;\n        public TextureHandle DepthNormalsTexture;\n        public TextureHandle SourceTexture;\n        public TextureHandle NormalsTexture;\n        public TextureHandle TempTarget;\n    }\n\n    private Material m_Material;\n\n    //shader \u5c5e\u6027ID\n    private static readonly int s_EdgeColorId = Shader.PropertyToID("_EdgeColor");\n    private static readonly int s_EdgeThicknessId = Shader.PropertyToID("_EdgeThickness");\n    private static readonly int s_EdgeThresholdId = Shader.PropertyToID("_EdgeThreshold");\n\n    public void Init(Material material)\n    {\n        m_Material = material;\n        profilingSampler = new ProfilingSampler("EdgeDetectionRenderPass");\n        renderPassEvent = RenderPassEvent.BeforeRenderingPostProcessing;\n    }\n\n    public void SetUp()\n    {\n        EdgeDetectionVolume volume = VolumeManager.instance.stack.GetComponent<EdgeDetectionVolume>();\n        if (!volume)\n            return;\n\n        m_Material.SetColor(s_EdgeColorId, volume.EdgeColor.value);\n        m_Material.SetFloat(s_EdgeThicknessId, volume.EdgeThickness.value);\n        m_Material.SetFloat(s_EdgeThresholdId, volume.EdgeThreshold.value);\n    }\n\n    public void Dispose() { }\n\n    public override void RecordRenderGraph(RenderGraph renderGraph, ContextContainer frameData)\n    {\n\n        UniversalResourceData resourceData = frameData.Get<UniversalResourceData>();\n        using (var builder = renderGraph.AddRasterRenderPass<PassData>("EdgeDetectionRenderPass", out PassData data))\n        {\n            builder.SetRenderAttachment(resourceData.activeColorTexture, 0);\n            builder.UseAllGlobalTextures(true);\n            builder.AllowPassCulling(false);\n            builder.SetRenderFunc<PassData>((PassData data, RasterGraphContext context) => ExecutePass(data, context));\n        }\n    }\n    \n    private void ExecutePass(PassData data, RasterGraphContext context)\n    {\n        Blitter.BlitTexture(context.cmd, Vector2.one, m_Material, 0);\n    }\n}\n'})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"EdgeDetectionRenderFeature.cs"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using UnityEngine;\nusing UnityEngine.Rendering;\nusing UnityEngine.Rendering.Universal;\n\npublic class EdgeDetectionRenderFeature : ScriptableRendererFeature\n{\n    [SerializeField]\n    private Shader m_Shader;\n\n    private EdgeDetectionRenderPass m_RenderPass;\n    private Material m_Material;\n\n    public override void Create()\n    {\n        if (m_Shader == null)\n        {\n            Debug.LogError("EdgeDetectionRenderFeature: Shader is not assigned");\n            return;\n        }\n\n        m_Material = new Material(m_Shader);\n        m_RenderPass = new EdgeDetectionRenderPass();\n        m_RenderPass.Init(m_Material);\n    }\n\n    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)\n    {\n        if (!IsActive(renderingData))\n        {\n            return;\n        }\n        m_RenderPass.SetUp();\n        renderer.EnqueuePass(m_RenderPass);\n    }\n\n    private bool IsActive(RenderingData renderingData)\n    {\n        if (m_Material == null)\n            return false;\n\n        EdgeDetectionVolume volume = VolumeManager.instance.stack.GetComponent<EdgeDetectionVolume>();\n        if (!volume || !volume.EnableEdgeDetection.value)\n            return false;\n\n        // Don\'t render for some views.\n        if (renderingData.cameraData.cameraType == CameraType.Preview\n            || renderingData.cameraData.cameraType == CameraType.Reflection\n            || UniversalRenderer.IsOffscreenDepthTexture(ref renderingData.cameraData))\n            return false;\n\n        return true;\n    }\n\n    protected override void Dispose(bool disposing)\n    {\n        if (m_Material != null)\n        {\n            if (Application.isPlaying)\n                Object.Destroy(m_Material);\n            else\n                Object.DestroyImmediate(m_Material);\n        }\n    }\n}\n'})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"EdgeDetectionVolume.cs"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'using UnityEngine;\nusing UnityEngine.Rendering;\n\n[System.Serializable, VolumeComponentMenu("Custom/EdgeDetection")]\npublic class EdgeDetectionVolume : VolumeComponent\n{\n\tpublic ClampedFloatParameter EdgeThreshold = new ClampedFloatParameter(0.1f, 0f, 1f);\n\tpublic ColorParameter EdgeColor = new ColorParameter(Color.black);\n\tpublic ClampedFloatParameter EdgeThickness = new ClampedFloatParameter(1f, 0f, 5f);\n\tpublic BoolParameter EnableEdgeDetection = new BoolParameter(true);\n}\n'})})]}),"\n",(0,a.jsxs)(r,{children:[(0,a.jsx)("summary",{children:"EdgeDetection.shader"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'Shader "Custom/EdgeDetection"\n{\n    Properties\n    {\n        _EdgeColor ("Edge Color", Color) = (0, 0, 0, 1)\n\t\t_EdgeThickness ("Edge Thickness", Range(0, 5)) = 1  //\u8fb9\u7f18\u539a\u5ea6\n        _EdgeThreshold ("Edge Threshold", Range(0, 1)) = 0.1 //\u8fb9\u7f18\u9608\u503c\n    }\n\n\tSubShader\n\t{\n\t\tTags{ "RenderType" = "Opaque" "RenderPipeline" = "UniversalPipeline"}\n\n\t\tZTest Always\n\t\tZWrite Off\n\t\tCull Off\n\t\tBlend SrcAlpha OneMinusSrcAlpha\n\n\t\tPass\n\t\t{\n\t\t\tHLSLPROGRAM\n\t\t\t#pragma vertex Vert   // vertex shader \u662f\u5728Blit.hlsl\u4e2d\u5b9a\u4e49\u7684\n\t\t\t#pragma fragment frag\n\n\t\t\t#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"\n\t\t\t#include "Packages/com.unity.render-pipelines.core/Runtime/Utilities/Blit.hlsl"\n\t\t\t#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareDepthTexture.hlsl"  //\u91c7\u6837\u573a\u666f\u6df1\u5ea6\n\t\t\t#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareNormalsTexture.hlsl" //\u91c7\u6837\u573a\u666f\u6cd5\u7ebf\n\t\t\t#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/DeclareOpaqueTexture.hlsl" //\u91c7\u6837\u573a\u666f\u989c\u8272\n\n\t\t\tCBUFFER_START(UnityPerMaterial)\n\t\t\tfloat4 _EdgeColor;\n\t\t\tfloat _EdgeThickness;\n\t\t\tfloat _EdgeThreshold;\n\t\t\tCBUFFER_END\n\n\t\t\t// Edge detection kernel that works by taking the sum of the squares of the differences between diagonally adjacent pixels (Roberts Cross).\n            float RobertsCross(float3 samples[4])\n            {\n                const float3 difference_1 = samples[1] - samples[2];\n                const float3 difference_2 = samples[0] - samples[3];\n                return sqrt(dot(difference_1, difference_1) + dot(difference_2, difference_2));\n            }\n\n            // The same kernel logic as above, but for a single-value instead of a vector3.\n            float RobertsCross(float samples[4])\n            {\n                const float difference_1 = samples[1] - samples[2];\n                const float difference_2 = samples[0] - samples[3];\n                return sqrt(difference_1 * difference_1 + difference_2 * difference_2);\n            }\n            \n            // Helper function to sample scene normals remapped from [-1, 1] range to [0, 1].\n            float3 SampleSceneNormalsRemapped(float2 uv)\n            {\n                return SampleSceneNormals(uv) * 0.5 + 0.5;\n            }\n\n            // Helper function to sample scene luminance.\n            float SampleSceneLuminance(float2 uv)\n            {\n                float3 color = SampleSceneColor(uv);\n                return color.r * 0.3 + color.g * 0.59 + color.b * 0.11;\n            }\n\n\t\t\thalf4 frag(Varyings IN) : SV_TARGET\n            {\n                // Screen-space coordinates which we will use to sample.\n                float2 uv = IN.texcoord;\n                float2 texel_size = float2(1.0 / _ScreenParams.x, 1.0 / _ScreenParams.y);\n                \n                // Generate 4 diagonally placed samples.\n                const float half_width_f = floor(_EdgeThickness * 0.5);\n                const float half_width_c = ceil(_EdgeThickness * 0.5);\n\n                float2 uvs[4];\n                uvs[0] = uv + texel_size * float2(half_width_f, half_width_c) * float2(-1, 1);  // top left\n                uvs[1] = uv + texel_size * float2(half_width_c, half_width_c) * float2(1, 1);   // top right\n                uvs[2] = uv + texel_size * float2(half_width_f, half_width_f) * float2(-1, -1); // bottom left\n                uvs[3] = uv + texel_size * float2(half_width_c, half_width_f) * float2(1, -1);  // bottom right\n                \n                float3 normal_samples[4];\n                float depth_samples[4], luminance_samples[4];\n                \n                for (int i = 0; i < 4; i++) {\n                    depth_samples[i] = SampleSceneDepth(uvs[i]);\n                    normal_samples[i] = SampleSceneNormalsRemapped(uvs[i]);\n                    luminance_samples[i] = SampleSceneLuminance(uvs[i]);\n                }\n                \n                // Apply edge detection kernel on the samples to compute edges.\n                float edge_depth = RobertsCross(depth_samples);\n                float edge_normal = RobertsCross(normal_samples);\n                float edge_luminance = RobertsCross(luminance_samples);\n                \n\t\t\t\t\n                // Threshold the edges (discontinuity must be above certain threshold to be counted as an edge). The sensitivities are hardcoded here.\n                float depth_threshold = 1 / 400.0f;\n                edge_depth = edge_depth > depth_threshold ? _EdgeThreshold : 0;\n                \n                float normal_threshold = 1 / 4.0f;\n                edge_normal = edge_normal > normal_threshold ? _EdgeThreshold : 0;\n                \n                float luminance_threshold = 1 / 0.5f;\n                edge_luminance = edge_luminance > luminance_threshold ? _EdgeThreshold : 0;\n                \n                // Combine the edges from depth/normals/luminance using the max operator.\n                float edge = max(edge_depth, max(edge_normal, edge_luminance));\n                \n                // Color the edge with a custom color.\n                return edge * _EdgeColor;\n            }\n \n\t\t\tENDHLSL\n\t\t}\n\t}\n\n}\n'})})]}),"\n",(0,a.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://ameye.dev/notes/edge-detection-outlines/",children:" Edge Detection Outlines"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},4674:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/renderFeatureEdgeDetection-1dedd882cec42fd44c9c1c9d28ab8993.gif"},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var r=t(6540);const a={},s=r.createContext(a);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);